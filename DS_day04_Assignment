// 1. Stack Program

/*
class Stack
{
	static final int MAX=5;
	int top;
	int arr[] = new int[MAX];
	
	Stack()
	{
		top=-1;
	}
	
	boolean isEmpty()
	{
		return (top<0);
	}
	
	boolean isFull()
	{
		return (top >=(MAX -1));
	}
	
	boolean push(int x)
	{
		if(top >= (MAX-1))
		{
			System.out.println("Stack is Overflow");
			return false;
		}
		else           //push operation
		{
			arr[++top] = x;            //top =top+1 --> arr[top]=x;
			System.out.println("Push : "+x);
		}
		return true;	
 	}
	int pop()
	{
		if(top < 0)
		{
			System.out.println("Stack is Underflow");
			return 0;
		}
		else     //pop operation
		{
			int x=arr[top--];   //post decrement
			//top=top-1;
			return x;
			
		}
	}
	
	
	public static void main(String []args)
	{
		Stack s = new Stack();
		s.push(10);
		s.push(101);
		s.push(105);
		s.push(123);
		s.push(134);
		System.out.println("pop : "+s.pop());
		s.push(102);
		
		System.out.println("pop : "+s.pop());
		System.out.println("pop : "+s.pop());
		
	}

}
*/

//2.String matching program 

/*
class Stack
{
	private static int size;
	private int top;
	private int arr[];
	
	Stack(int s)
	{
		top=-1;
		size=s;
		arr=new int[size];	
	}
	
	public int push(int x)
	{
		return arr[++top]=x;
	}
	
	public int pop()
	{
		return arr[top--];
	}
	
	boolean isEmpty()
	{
		return (top ==-1);
	}
	
	boolean isFull()
	{
		return (top==size-1);
	}

}


class StringMatching
{	

	public static void reverse(StringBuffer sb)
	{
		int n = sb.length();
		Stack sp = new Stack(n);
		
		for(int i=0;i<n;i++)
		{
			sp.push(sb.charAt(i));
		}	
		for(int i =0;i<n ;i++)
		{
			char ch=(char)sp.pop();
			sb.setCharAt(i,ch);
		}
		
	}
	public static void main(String [] args)
	{
		StringBuffer s= new StringBuffer("SANVI");
		reverse(s);
		
		System.out.println("Reverse String : "+s);
	}
}

*/
